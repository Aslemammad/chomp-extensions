version = 0.1
default-task = 'test'

extensions = [
  'chomp@0.1:assert',
	'chomp@0.1:babel',
	'chomp@0.1:jspm',
  'chomp@0.1:prettier',
	'chomp@0.1:rollup',
  'chomp@0.1:svelte',
  'chomp@0.1:swc',
]

[template-options.npm]
auto-install = true

[[task]]
name = 'test'
serial = true
deps = ['test:init', 'prettier', 'jspm', 'svelte', 'swc', 'babel', 'rollup']

[[task]]
name = 'check'
deps = ['app-build.html', 'lib-swc/test.js', 'test-babel.js']
engine = 'node'
run = '''
  import { readFileSync } from 'fs';
  import assert from 'assert';

  const log = readFileSync('testlog.txt', 'utf8').trim().split(/\r?\n/);
  assert.equal(log.length, 2);
  assert(log.indexOf('unit test a') !== -1);
  assert(log.indexOf('unit test b') !== -1);

  console.log('TESTS OK');
'''

[[task]]
name = 'test:init'
run = 'rm -r output ; echo recover'

[[task]]
name = 'prettier'
template = 'prettier'

[[task]]
name = 'jspm'
target = 'output/app-build.html'
dep = 'fixtures/app.html'
template = 'assert'
[task.template-options]
task-template = 'jspm'
expect-equals = '''
<!DOCTYPE html>
<script async src="https://ga.jspm.io/npm:es-module-shims@1.4.6/dist/es-module-shims.js" crossorigin="anonymous"></script>
<script type="importmap">
{
  "imports": {
    "react": "https://ga.jspm.io/npm:react@17.0.2/index.js"
  },
  "scopes": {
    "https://ga.jspm.io/": {
      "object-assign": "https://ga.jspm.io/npm:object-assign@4.1.1/index.js"
    }
  }
}
</script>
<script type="module">
  import * as React from "react";
  console.log(React, oooi);
</script>
'''

[[task]]
name = 'svelte'
target = 'output/test.js'
deps = ['fixtures/test.svelte']
template = 'assert'
[task.template-options]
task-template = 'svelte'
expect-equals = '''
/* output/test.js generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function create_fragment(ctx) {
	let div2;
	let div0;
	let t1;
	let div1;
	let t2;
	let t3;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "Message:";
			t1 = space();
			div1 = element("div");
			t2 = text(/*msg*/ ctx[0]);
			t3 = space();
			button = element("button");
			button.textContent = "Change Message";
			attr(div1, "class", "message svelte-1sryeut");
			attr(div2, "class", "container svelte-1sryeut");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
			insert(target, t3, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*msg*/ 1) set_data(t2, /*msg*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching) detach(t3);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let msg = "hello";
	const click_handler = () => $$invalidate(0, msg = msg + " hello");
	return [msg, click_handler];
}

class Test extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Test;
'''


[[task]]
name = 'swc'
deps = ['output/lib-swc/test.js', 'output/lib-swc/*.js']
template = 'assert'
[task.template-options]
expect-equals = """
import { dep } from "./dep.js";
console.log(dep);
export var p = 5;\n\n\n//# sourceMappingURL=test.js.map
"""

[[task]]
template = 'swc'
target = 'output/lib-swc/#.js'
dep = 'fixtures/src-swc/#.ts'

[[task]]
name = 'babel'
target = 'output/test-babel.js'
deps = ['fixtures/test.ts']
template = 'assert'
[task.template-options.task-template-options]
presets = ['@babel/preset-typescript']
[task.template-options]
task-template = 'babel'
expect-equals = """
export var p = 5;\n\n//# sourceMappingURL=test-babel.js.map
"""

[[task]]
name = 'rollup'
target = 'output/rollup-dist/test.js'
deps = ['output/lib-swc/*.js']
template = 'assert'
[task.template-options.task-template-options]
outdir = 'output/rollup-dist'
entries = ['output/lib-swc/test.js']
[task.template-options]
task-template = 'rollup'
expect-equals = '''
const dep = "dep";

console.log(dep);
var p = 5;

export { p };
//# sourceMappingURL=test.js.map
'''
